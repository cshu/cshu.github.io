<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf-8" /><!--usually unnecessary-->
		<title>Language Ranking</title>
	</head>
	<body style="text-align:center">
		<input style="width:275px;text-align:center" id="usernm" placeholder="Enter a GitHub username" autofocus /><div style="display:none">Loading...</div>
		<div>Using GitHub API.<br />Forked repositories are not included.<br />Note sometimes the type of detected language of GitHub API can be wrong.<br />Note requesting too many times can result in failure due to rate limit.<br /><br /></div>
		<div id="resultd"></div>
		<script>
		var h_usernm=document.getElementById('usernm');
		function xhrlistl(listofre,reslist){
			var re=listofre.pop();
			if(!re){
				var sum=reslist.sumofall/100;
				delete reslist.sumofall;
				var rank=Object.keys(reslist);
				rank.sort(function(x,y){
					return reslist[y]-reslist[x];
				});
				document.getElementById('resultd').innerHTML='';
				var resstr='';
				for(;;){
					var l=rank.shift();
					if(!l) break;
					document.getElementById('resultd').appendChild(document.createElement('div')).textContent=l+': '+reslist[l]+' bytes ('+(reslist[l]/sum).toFixed(2)+'%)';
				}
				h_usernm.nextSibling.replaceChild(document.createElement('a'),h_usernm.nextSibling.firstChild);
				h_usernm.nextSibling.firstChild.text='New Search';
				h_usernm.nextSibling.firstChild.href=location.protocol+'//'+location.host+location.pathname;
				return;
			}

			if(re.fork){
				xhrlistl(listofre,reslist);
			}else{
				var xhr = new XMLHttpRequest;
				xhr.open('GET',re.languages_url);
				xhr.onreadystatechange = function () {
					if(xhr.readyState===XMLHttpRequest.DONE){
						switch(xhr.status){
						case 200:
							var xres=JSON.parse(xhr.response);
							for(var pro in xres){//there is no need for hasOwnProperty here?
								if(reslist[pro]) reslist[pro]+=xres[pro];
								else reslist[pro]=xres[pro];
								reslist.sumofall+=xres[pro];
							}
							xhrlistl(listofre,reslist);
							break;
						default:
							//throw new Error(xhr.status);
							alert('GitHub API status code of error response: '+xhr.status+'\n'+xhr.response);
							break;
						}
					}
				};
				xhr.send(null);
			}
		}
		function initre(){
			this.readOnly=true;
			this.nextSibling.style.display='';
			var xhr = new XMLHttpRequest;
			xhr.open('GET','https://api.github.com/users/'+this.value+'/repos');
			xhr.onreadystatechange = function () {
				if(xhr.readyState===XMLHttpRequest.DONE){
					switch(xhr.status){
					case 200:
						var xres=JSON.parse(xhr.response);
						xhrlistl(xres,{sumofall:0});
						break;
					default:
						//throw new Error(xhr.status);
						alert('GitHub API status code of error response: '+xhr.status+'\n'+xhr.response);
						break;
					}
				}
			};
			xhr.send(null);
		}
		if(location.search){
			var usnm=location.search.slice(location.search.indexOf('=')+1);
			h_usernm.value=usnm;
			initre.call(h_usernm);
		}else{
			h_usernm.onkeydown=function(ke){
				if(ke.keyCode!==0x0d)return;
				if(!this.value)return;
				this.onkeydown=null;
				initre.call(this);
			};
		}
			
		</script>
